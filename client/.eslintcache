[{"/Users/tmkim/Desktop/hola/client/src/index.js":"1","/Users/tmkim/Desktop/hola/client/src/reportWebVitals.js":"2","/Users/tmkim/Desktop/hola/client/src/store/language.js":"3","/Users/tmkim/Desktop/hola/client/src/store/loginStep.js":"4","/Users/tmkim/Desktop/hola/client/src/store/user.js":"5","/Users/tmkim/Desktop/hola/client/src/store/write.js":"6","/Users/tmkim/Desktop/hola/client/src/App.jsx":"7","/Users/tmkim/Desktop/hola/client/src/service/study_service.js":"8","/Users/tmkim/Desktop/hola/client/src/service/http_client.js":"9","/Users/tmkim/Desktop/hola/client/src/service/user_service.js":"10","/Users/tmkim/Desktop/hola/client/src/service/auth_service.js":"11","/Users/tmkim/Desktop/hola/client/src/page/setting/setting.jsx":"12","/Users/tmkim/Desktop/hola/client/src/page/postRegister/postRegister.jsx":"13","/Users/tmkim/Desktop/hola/client/src/page/main/main.jsx":"14","/Users/tmkim/Desktop/hola/client/src/page/auth/githubLogin.jsx":"15","/Users/tmkim/Desktop/hola/client/src/common/utils.js":"16","/Users/tmkim/Desktop/hola/client/src/languageList.js":"17","/Users/tmkim/Desktop/hola/client/src/component/like_languages/likeLanguages.jsx":"18","/Users/tmkim/Desktop/hola/client/src/component/user_image_upload/userImageUpload.jsx":"19","/Users/tmkim/Desktop/hola/client/src/component/editor/editorContainer.jsx":"20","/Users/tmkim/Desktop/hola/client/src/component/writeButton/writebuttonContainer.jsx":"21","/Users/tmkim/Desktop/hola/client/src/component/study_list/studyList.jsx":"22","/Users/tmkim/Desktop/hola/client/src/component/language_bar_list/languageBarList.jsx":"23","/Users/tmkim/Desktop/hola/client/src/component/nav_bar/navbar.jsx":"24","/Users/tmkim/Desktop/hola/client/src/component/banner/banner.jsx":"25","/Users/tmkim/Desktop/hola/client/src/component/writeButton/writebutton.jsx":"26","/Users/tmkim/Desktop/hola/client/src/component/editor/editor.jsx":"27","/Users/tmkim/Desktop/hola/client/src/component/language_bar_item/languageBarItem.jsx":"28","/Users/tmkim/Desktop/hola/client/src/component/login_user/loginUser.jsx":"29","/Users/tmkim/Desktop/hola/client/src/component/study_item/studyItem.jsx":"30","/Users/tmkim/Desktop/hola/client/src/component/modal/modal_component/modal.jsx":"31","/Users/tmkim/Desktop/hola/client/src/component/modal/login_modal/loginModal.jsx":"32","/Users/tmkim/Desktop/hola/client/src/component/modal/portal/portal.jsx":"33","/Users/tmkim/Desktop/hola/client/src/component/modal/post_modal/postModal.jsx":"34","/Users/tmkim/Desktop/hola/client/src/component/login_button/github_button/githubButton.jsx":"35","/Users/tmkim/Desktop/hola/client/src/component/login_button/google_button/googleButton.jsx":"36","/Users/tmkim/Desktop/hola/client/src/component/dropdown_bar/dropdownBar.jsx":"37","/Users/tmkim/Desktop/hola/client/src/component/login_button/kakao_button/kakaoButton.jsx":"38"},{"size":1952,"mtime":1622218023910,"results":"39","hashOfConfig":"40"},{"size":362,"mtime":1613053910168,"results":"41","hashOfConfig":"40"},{"size":484,"mtime":1615907787598,"results":"42","hashOfConfig":"40"},{"size":628,"mtime":1620454025437,"results":"43","hashOfConfig":"40"},{"size":4327,"mtime":1622218023913,"results":"44","hashOfConfig":"40"},{"size":1684,"mtime":1622218023913,"results":"45","hashOfConfig":"40"},{"size":1651,"mtime":1622218023907,"results":"46","hashOfConfig":"40"},{"size":2468,"mtime":1622213789306,"results":"47","hashOfConfig":"40"},{"size":308,"mtime":1620454025436,"results":"48","hashOfConfig":"40"},{"size":1447,"mtime":1622185129496,"results":"49","hashOfConfig":"40"},{"size":1141,"mtime":1621058097519,"results":"50","hashOfConfig":"40"},{"size":5279,"mtime":1622218027221,"results":"51","hashOfConfig":"40"},{"size":569,"mtime":1622218023911,"results":"52","hashOfConfig":"40"},{"size":4342,"mtime":1622218023911,"results":"53","hashOfConfig":"40"},{"size":1289,"mtime":1622218023910,"results":"54","hashOfConfig":"40"},{"size":614,"mtime":1622219160947,"results":"55","hashOfConfig":"40"},{"size":780,"mtime":1622091689526,"results":"56","hashOfConfig":"40"},{"size":578,"mtime":1622215194467,"results":"57","hashOfConfig":"40"},{"size":1427,"mtime":1622218638255,"results":"58","hashOfConfig":"40"},{"size":813,"mtime":1621505857698,"results":"59","hashOfConfig":"40"},{"size":1440,"mtime":1621505857698,"results":"60","hashOfConfig":"40"},{"size":432,"mtime":1619955441570,"results":"61","hashOfConfig":"40"},{"size":637,"mtime":1619955441567,"results":"62","hashOfConfig":"40"},{"size":2518,"mtime":1622218023909,"results":"63","hashOfConfig":"40"},{"size":892,"mtime":1616587553625,"results":"64","hashOfConfig":"40"},{"size":544,"mtime":1621346742999,"results":"65","hashOfConfig":"40"},{"size":5398,"mtime":1622097915776,"results":"66","hashOfConfig":"40"},{"size":843,"mtime":1615907787594,"results":"67","hashOfConfig":"40"},{"size":2074,"mtime":1622218023908,"results":"68","hashOfConfig":"40"},{"size":1953,"mtime":1622218023909,"results":"69","hashOfConfig":"40"},{"size":958,"mtime":1616108665194,"results":"70","hashOfConfig":"40"},{"size":5109,"mtime":1621058097518,"results":"71","hashOfConfig":"40"},{"size":287,"mtime":1615907787596,"results":"72","hashOfConfig":"40"},{"size":320,"mtime":1622218023908,"results":"73","hashOfConfig":"40"},{"size":2665,"mtime":1619955441568,"results":"74","hashOfConfig":"40"},{"size":1351,"mtime":1620823243181,"results":"75","hashOfConfig":"40"},{"size":1541,"mtime":1622218023907,"results":"76","hashOfConfig":"40"},{"size":1631,"mtime":1617255068212,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"1y0xn7v",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"80"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"80"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"/Users/tmkim/Desktop/hola/client/src/index.js",[],["162","163"],"/Users/tmkim/Desktop/hola/client/src/reportWebVitals.js",[],"/Users/tmkim/Desktop/hola/client/src/store/language.js",[],"/Users/tmkim/Desktop/hola/client/src/store/loginStep.js",[],"/Users/tmkim/Desktop/hola/client/src/store/user.js",[],"/Users/tmkim/Desktop/hola/client/src/store/write.js",[],"/Users/tmkim/Desktop/hola/client/src/App.jsx",["164","165","166","167","168","169"],"import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Main from \"./page/main/main\";\nimport PostRegister from \"./page/postRegister/postRegister\";\nimport Setting from \"./page/setting/setting\";\nimport GithubLogin from \"./page/auth/githubLogin\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { fetchUserByRefreshToken, clearUser } from \"./store/user\";\n\n/* \n\nApp component \n\n로그인한 User 정보가 있으면 user 정보를 set 하고\n적절한 component로 routing을 진행합니다.\n\nto-do\n-> localStorage에 user를 저장하자!!\n-> access token은 날아가는데 refresh token은 왜 남아있지? 둘다 header에 저장 아닌가?\n-> 새 글쓰기 같은 버튼에서 access token 여부를 check할 수 있나?\n-> 결론적으로는 ssr을 적용해야하나?\n-> 생각하는 방법은 index.js에서 fetchUserByRefreshToken씀\n-> 성공시 user, localStorage set. \n-> 실패시 user초기화, localStorage 초기화?\n-> fetchByRefreshToken의 정확한 용도를 알아야될듯..!\n-> access token 없을때 계속 써야할텐데, user 있으면 그냥 setting 하면 되지않나?\n*/\n\nconst App = () => {\n  console.log(\"App!!!!!!!!!!!!!!!!!!!!!!!!!!!\");\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path={[\"/\", \"/main\"]}>\n          <Main />\n        </Route>\n      </Switch>\n      <Route path=\"/register\">\n        <PostRegister />\n      </Route>\n      <Route path=\"/setting\">\n        <Setting />\n      </Route>\n      <Route path=\"/auth/github\">\n        <GithubLogin />\n      </Route>\n    </Router>\n  );\n};\n\nexport default App;\n","/Users/tmkim/Desktop/hola/client/src/service/study_service.js",[],"/Users/tmkim/Desktop/hola/client/src/service/http_client.js",[],"/Users/tmkim/Desktop/hola/client/src/service/user_service.js",[],"/Users/tmkim/Desktop/hola/client/src/service/auth_service.js",[],"/Users/tmkim/Desktop/hola/client/src/page/setting/setting.jsx",["170","171"],"import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router\";\nimport { toast } from 'react-toastify';\n\nimport styles from \"./setting.module.css\";\nimport Navbar from \"../../component/nav_bar/navbar\";\nimport languageList from '../../languageList';\nimport userService from \"../../service/user_service\";\nimport studyService from \"../../service/study_service\";\nimport { clearUser } from \"../../store/user\";\nimport { nextStep } from \"../../store/loginStep\";\nimport { modifyUserInfo } from \"../../store/user\";\nimport { getFormatedToday } from \"../../common/utils\";\nimport LikeLanguages from \"../../component/like_languages/likeLanguages\";\nimport UserImageUpload from \"../../component/user_image_upload/userImageUpload\";\n/*\n// TODO\n이미지 컴포넌트로 분리\ns3 경로 config 파일로 분리\n\ngetPresignedUrl과 사용하는 filename 맞춰야함(분 달라지면 파일 못찾음)\n\n\n*/\nconst Setting = (props) => {\n  const [id, setID] = useState('');\n  const [nickName, setNickName] = useState('');\n  const [preNickName, setPreNickName] = useState('');\n  const [likeLanguages, setLikeLanguages] = useState([]);\n  const [image, setImage] = useState(null);\n  const [isImageChanged, setIsImageChanged] = useState(false);\n  const user = useSelector((state) => state.user);\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  // 사용자 정보 세팅\n  useEffect(() => {\n    if(user.nickName) {\n      userService\n      .getUserInfoByNickName(user.nickName)\n      .then((response) => {\n        const userInfo = response.data;\n        if(userInfo.likeLanguages.length > 0) {\n          setLikeLanguages(userInfo.likeLanguages.map((obj) => {\n            let rObj = {};\n            rObj.value = obj;\n            rObj.label = languageList.find((element) => {\n            if(element.value === obj)\n              return true;\n            }).label;\n            return rObj;\n          }));\n        }\n        setID(userInfo._id);\n        setNickName(userInfo.nickName);\n        setPreNickName(userInfo.nickName);\n        if(userInfo.image) {\n          setImage(userInfo.image);\n        }\n      })\n      .catch(console.error);\n    }\n  },[]);\n\n  // 변경 완료 버튼\n  const onCompleteClick = async (e) => {\n    if(!nickName) {\n      toast.error('닉네임을 입력해야 합니다.', {\n        position: \"top-right\",\n        autoClose: 3000\n      });\n    }\n    else {\n      let languages = [];\n      if(likeLanguages.length > 0) {\n        likeLanguages.forEach(element => {\n          languages.push(element.value);\n        });\n      }\n\n      let payload = {\n          id: id,\n          likeLanguages: languages\n      };\n\n      if(nickName !== preNickName) {\n        payload.nickName = nickName;\n      }\n\n      if(isImageChanged) {\n        if(image) {\n          const preSignedUrl = await studyService.getPresignedUrl(nickName);\n          const fileName = `${nickName}_${getFormatedToday()}.png`;\n\n          await studyService\n          .uploadImageToS3WithBase64(preSignedUrl, image, fileName)\n          .then((response) => {\n            payload.image = fileName;\n          });\n        }\n        else {\n          payload.image = '';\n        }\n      }\n      await dispatch(modifyUserInfo(payload)).then(\n        (response) => {\n          if(response.payload) {\n            toast.success('변경이 완료되었습니다.', {\n              position: \"top-right\",\n              autoClose: 3000\n            });\n            history.push('/');\n          }\n          else {\n            toast.error('닉네임이 중복되었습니다.', {\n              position: \"top-right\",\n              autoClose: 3000\n            });\n          }\n        }\n      );\n    }\n  };\n\n  // 회원 탈퇴\n  const onSignOutClick = async (e) => {\n    userService.deleteUser(id).then((deleteSuccess) => {\n      localStorage.removeItem(\"userName\");\n      dispatch(clearUser());\n      dispatch(nextStep(\"LOGIN\"));\n      history.push('/');\n    });\n  };\n\n    return (\n    <>\n        <Navbar></Navbar>\n        <div className={styles.main}>\n          <h1>내 정보 수정</h1>\n          <UserImageUpload image={image} setImage={setImage} setIsImageChanged={setIsImageChanged}></UserImageUpload>\n          <div className={styles.titleWrapper}>\n              <h3>닉네임</h3>\n              <input type=\"text\" name=\"nickNameInput\" value={nickName} onChange={(e) => {setNickName(e.target.value)}}/>\n          </div>\n          <p className={styles.description}>\n              Hola에서 사용되는 이름입니다.\n          </p>\n          <hr />\n          <div className={styles.titleWrapper}>\n              <h3>\n              관심 기술 태그\n              </h3>\n              <LikeLanguages likeLanguages={likeLanguages} setLikeLanguages={setLikeLanguages}></LikeLanguages>\n          </div>\n          <p className={styles.description}>\n              관심 있는 기술 태그를 등록해주세요.\n          </p>\n          <hr />\n          <button onClick={onCompleteClick} className={styles.buttonComplete} name=\"complete\">완료</button>\n          <button onClick={onSignOutClick} className={styles.buttonSignOut} name=\"signOut\">회원탈퇴</button>\n        </div>\n    </>\n    );\n};\n\nexport default Setting;\n","/Users/tmkim/Desktop/hola/client/src/page/postRegister/postRegister.jsx",[],"/Users/tmkim/Desktop/hola/client/src/page/main/main.jsx",["172","173","174"],"import styles from \"./main.module.css\";\nimport { useEffect, useState } from \"react\";\nimport StudyList from \"../../component/study_list/studyList\";\nimport Navbar from \"../../component/nav_bar/navbar\";\nimport Banner from \"../../component/banner/banner\";\nimport React from \"react\";\nimport LanguageBarList from \"../../component/language_bar_list/languageBarList\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport studyService from \"../../service/study_service\";\nimport { fetchUserByRefreshToken, clearUser } from \"../../store/user\";\n\n/* \n\nmain page의 layout을 담당하는 component입니다. \ncomponent rendering시 useEffect를 통해 render할 post list를 받아옵니다.\n\nTo-Do\ncategory component 분리\n\n*/\n\nconst SORT_BY_VIEWS = \"+views\";\nconst SORT_BY_DATE = \"-createdAt\";\nconst SHOW_BY_VIEWS = \"trending\";\nconst SHOW_BY_DATE = \"recent\";\nconst ACTIVE = styles.active;\nconst INACTIVE = styles.inactive;\n\nconst Main = (props) => {\n  console.log(\"MAIN START!!!\");\n  const [popularStudyList, setPopularStudyList] = useState([]);\n  const [recentStudyList, setRecentStudyList] = useState([]);\n  const [category, setCategory] = useState(SHOW_BY_DATE);\n  const [styleDate, setStyleDate] = useState(ACTIVE);\n  const [styleRecent, setStyleRecent] = useState(INACTIVE);\n  const selectedLanguages = useSelector((state) => state.language);\n\n  useEffect(() => {\n    console.log(\"Main UseEffect!!!!!!!!!!!!!!!!!!\");\n    studyService //\n      .getList(SORT_BY_DATE, selectedLanguages)\n      .then((response) => {\n        console.log(\"study list api 1 완료\");\n        setRecentStudyList(response.data);\n      })\n      .catch(console.error);\n\n    studyService //\n      .getList(SORT_BY_VIEWS, selectedLanguages)\n      .then((response) => {\n        console.log(\"study list api 2 완료\");\n        setPopularStudyList(response.data);\n      })\n      .catch(console.error);\n  }, [selectedLanguages]);\n\n  const toggleCategory = (e) => {\n    console.log(e);\n    if (category === SHOW_BY_DATE) {\n      setCategory((state) => SHOW_BY_VIEWS);\n      setStyleDate((state) => INACTIVE);\n      setStyleRecent((state) => ACTIVE);\n    } else {\n      setCategory((state) => SHOW_BY_DATE);\n      setStyleDate((state) => ACTIVE);\n      setStyleRecent((state) => INACTIVE);\n    }\n  };\n\n  return (\n    <>\n      <Navbar></Navbar>\n      <Banner />\n      <div className={styles.languageBarWrapper}>\n        <LanguageBarList />\n      </div>\n      <div className={styles.appWrapper}>\n        <div className={styles.app}>\n          <main className={styles.main}>\n            <section className={styles.category}>\n              <div\n                className={`${styles.category__item} ${styleDate}`}\n                onClick={toggleCategory}\n              >\n                <svg\n                  stroke=\"currentColor\"\n                  fill=\"currentColor\"\n                  strokeWidth=\"0\"\n                  viewBox=\"0 0 24 24\"\n                  height=\"1em\"\n                  width=\"1em\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm.5-13H11v6l5.25 3.15.75-1.23-4.5-2.67z\"></path>\n                </svg>\n                <span className={styles.text}>최신</span>\n              </div>\n              <div\n                className={`${styles.category__item} ${styleRecent}`}\n                onClick={toggleCategory}\n              >\n                <svg\n                  stroke=\"currentColor\"\n                  fill=\"currentColor\"\n                  strokeWidth=\"0\"\n                  viewBox=\"0 0 24 24\"\n                  height=\"1em\"\n                  width=\"1em\"\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                >\n                  <path d=\"M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z\"></path>\n                </svg>\n\n                <span className={styles.text}>트렌딩</span>\n              </div>\n            </section>\n            {category === SHOW_BY_DATE ? (\n              <StudyList studyList={popularStudyList}></StudyList>\n            ) : (\n              <StudyList studyList={recentStudyList}></StudyList>\n            )}\n          </main>\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Main;\n","/Users/tmkim/Desktop/hola/client/src/page/auth/githubLogin.jsx",[],"/Users/tmkim/Desktop/hola/client/src/common/utils.js",["175"],"/Users/tmkim/Desktop/hola/client/src/languageList.js",[],"/Users/tmkim/Desktop/hola/client/src/component/like_languages/likeLanguages.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/user_image_upload/userImageUpload.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/editor/editorContainer.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/writeButton/writebuttonContainer.jsx",["176","177"],"import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory, useLocation } from \"react-router\";\nimport { writePost } from \"../../store/write\";\nimport Writebutton from \"./writebutton\";\n\n/* \n\nWritebutton을 감싸고 있는 component입니다.\n\npost 등록이 성공하면 main page로 이동하고,\n실패하면 error를 보여줍니다.\n\nTo-do\n-> modal 보여지도록 글 id return 받기\n-> 실패했을때 에러 띄워주기\n\n*/\nconst WritebuttonContainer = (props) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { title, content, language, post, postError } = useSelector(\n    ({ write }) => ({\n      title: write.title,\n      content: write.content,\n      language: write.language,\n      post: write.post,\n      postError: write.postError,\n    })\n  );\n\n  // language 자동으로 넘어가도록 수정\n  const onPublish = () => {\n    dispatch(\n      writePost({ title, content, language: [\"Typescript\", \"typescript\"] })\n    ).then((response) => {\n      console.log(\"response is \", response);\n    });\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  useEffect(() => {\n    if (post) {\n      history.push(\"/\");\n    }\n\n    if (postError) {\n      console.log(post.Error);\n    }\n  }, [history, post, postError]);\n\n  return <Writebutton onPublish={onPublish} onCancel={onCancel}></Writebutton>;\n};\n\nexport default WritebuttonContainer;\n","/Users/tmkim/Desktop/hola/client/src/component/study_list/studyList.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/language_bar_list/languageBarList.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/nav_bar/navbar.jsx",["178","179","180"],"import React, { useEffect, useState } from \"react\";\nimport LoginModal from \"../modal/login_modal/loginModal\";\nimport Modal from \"../modal/modal_component/modal\";\nimport styles from \"./navbar.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport LoginUser from \"../login_user/loginUser\";\nimport { setModalVisible } from \"../../store/loginStep\";\nimport { clearUser, fetchUserByRefreshToken, setUser } from \"../../store/user\";\n\nconst Navbar = React.memo(() => {\n  console.log(\"NAVBAR START!\");\n  const dispatch = useDispatch();\n  const user = useSelector((state) => state.user);\n  const history = useHistory();\n  let apiFlag = false;\n\n  const modalVisible = useSelector((state) => state.loginStep.modalVisible);\n  const openModal = () => {\n    document.body.style.overflow = \"hidden\";\n    dispatch(setModalVisible(true));\n  };\n  const closeModal = () => {\n    document.body.style.overflow = \"auto\";\n    dispatch(setModalVisible(false));\n  };\n\n  useEffect(() => {\n    console.log(\"navbar useEffect!!\");\n    //dispatch(setUser(\"hi\"));\n    if (apiFlag) {\n      // page refresh후 갱신\n      dispatch(fetchUserByRefreshToken()).then((response) => {\n        // 유저 미존재시 refresh token을 이용해서 유저정보 얻어옴\n        console.log(response.meta.requestStatus);\n        if (response.meta.requestStatus !== \"fulfilled\") {\n          //clearUser();\n          history.push(\"/\");\n          //alert(\"히히\");\n        }\n        console.log(\"fetchByuserRefreshToken response :\", response);\n        // 실패했을때 에러처리 필요할 듯\n      });\n    }\n  }, [dispatch, apiFlag, history]);\n  return (\n    <nav className={styles.navbar}>\n      <a href=\"/\">\n        <img\n          className={styles.logo}\n          src=\"/images/logo/hola_logo_w.png\"\n          alt=\"logo\"\n        />\n      </a>\n      <div className={styles.loginElementWrapper}>\n        {!user.nickName ? (\n          <button className={styles.login} onClick={openModal}>\n            로그인\n          </button>\n        ) : (\n          <>\n            <button className={styles.postRegister}>\n              <Link to=\"/register\">새 글 쓰기</Link>\n            </button>\n            <LoginUser />\n          </>\n        )}\n      </div>\n      {modalVisible && (\n        <Modal visible={modalVisible} onClose={closeModal}>\n          <LoginModal handleClose={closeModal} tabIndex={0}></LoginModal>\n        </Modal>\n      )}\n    </nav>\n  );\n});\n\nexport default Navbar;\n","/Users/tmkim/Desktop/hola/client/src/component/banner/banner.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/writeButton/writebutton.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/editor/editor.jsx",["181","182"],"import React, { useRef, useEffect, useCallback, useState } from \"react\";\nimport styled from \"styled-components\";\nimport studyService from \"../../service/study_service\";\nimport Quill from \"quill\";\nimport styles from \"./editor.module.css\";\nimport QuillImageDropAndPaste from \"quill-image-drop-and-paste\";\nimport \"react-quill/dist/quill.snow.css\";\nimport { useSelector } from \"react-redux\";\nimport { getFormatedToday } from \"../../common/utils\";\n\n/* \n\nQuill을 이용한 editor component 입니다.\nredux로 editor 상태를 관리하고,\nuser가 image upload시 s3 bucket으로 바로 upload 합니다.\n\nTo-do\nstyled-component 제거 \n-> quill 내부 style sheet 적용하려면 css file을 import 해야해서 일단 보류\n\npng 파일 외에 gif나 jpeg도 test\nimage minify 적용할건지 결정 필요\nimage upload시 파일 크기 작은거 확인 필요\ninput 관리 redux 적용\n\n*/\n\nconst QuillWrapper = styled.div`\n  /* 최소 크기 지정 및 padding 제거 */\n  .ql-editor {\n    padding: 0;\n    min-height: 480px;\n    font-size: 1.125rem;\n    line-height: 1.5;\n  }\n  .ql-editor.ql-blank::before {\n    left: 0px;\n  }\n`;\n\nconst Editor = ({ title, content, onChangeField }) => {\n  const quillElement = useRef(\"\"); // Quill을 적용할 DivElement를 설정\n  const quillInstance = useRef(\"\"); // Quill 인스턴스를 설정\n  const user = useSelector((state) => state.user);\n  const [image, setImage] = useState();\n\n  /* image Handler 함수 */\n  const imageHandler = useCallback(async (dataUrl, type, imageData) => {\n    imageData\n      .minify({\n        maxWidth: 320,\n        maxHeight: 320,\n        quality: 0.7,\n      })\n      .then((miniImageData) => {\n        const fileName = `${user.nickName}_${getFormatedToday()}.png`;\n        const file = miniImageData.toFile(fileName);\n        setImage((state) => file);\n      });\n\n    const quill = quillInstance.current;\n    const preSignedUrl = await studyService.getPresignedUrl(user.nickName);\n    const fileName = `${user.nickName}_${getFormatedToday()}.png`;\n    const imageFile = imageData.toFile(fileName);\n    /* bucket image upload */\n    await studyService\n      .uploadImageToS3(preSignedUrl, imageFile)\n      .then((response) => {\n        const imageUrl = `https://hola-post-image.s3.ap-northeast-2.amazonaws.com/${fileName}`;\n        let index = (quill.getSelection() || {}).index;\n        if (index === undefined || index < 0) index = quill.getLength();\n        quill.insertEmbed(index, \"image\", imageUrl, \"user\");\n        quill.setSelection(quill.getSelection().index + 1, 0); // image upload 후 cursor 이동\n      });\n  }, []);\n\n  /* default quill editor 설정 */\n  useEffect(() => {\n    Quill.register(\"modules/imageDropAndPaste\", QuillImageDropAndPaste);\n    quillInstance.current = new Quill(quillElement.current, {\n      modules: {\n        toolbar: [\n          [{ header: \"1\" }, { header: \"2\" }],\n          [\"bold\", \"italic\", \"underline\", \"strike\"],\n          [{ list: \"ordered\" }, { list: \"bullet\" }],\n          [\"blockquote\", \"code-block\", \"link\", \"image\"],\n        ],\n        imageDropAndPaste: {\n          handler: imageHandler,\n        },\n      },\n      placeholder: \"내용을 입력하세요...\",\n      readOnly: false,\n      theme: \"snow\",\n    });\n\n    /* 기본 image upload button에 대해서도 같은 handler 적용 */\n    const ImageData = QuillImageDropAndPaste.ImageData;\n    quillInstance.current\n      .getModule(\"toolbar\")\n      .addHandler(\"image\", (clicked) => {\n        if (clicked) {\n          let fileInput = quillInstance.current.container.querySelector(\n            \"input.ql-image[type=file]\"\n          );\n          if (fileInput == null) {\n            fileInput = document.createElement(\"input\");\n            fileInput.setAttribute(\"type\", \"file\");\n            fileInput.setAttribute(\n              \"accept\",\n              \"image/png, image/gif, image/jpeg, image/bmp, image/x-icon\"\n            );\n            fileInput.classList.add(\"ql-image\");\n            fileInput.addEventListener(\"change\", (e) => {\n              let files = e.target.files,\n                file;\n              if (files.length > 0) {\n                file = files[0];\n                let type = file.type;\n                let reader = new FileReader();\n                reader.onload = (e) => {\n                  // handle the inserted image\n                  let dataUrl = e.target.result;\n                  imageHandler(dataUrl, type, new ImageData(dataUrl, type));\n                  fileInput.value = \"\";\n                };\n                reader.readAsDataURL(file);\n              }\n            });\n          }\n          fileInput.click();\n        }\n      });\n\n    const quill = quillInstance.current;\n    quill.on(\"text-change\", (delta, oldDelta, source) => {\n      if (source === \"user\") {\n        onChangeField({ key: \"content\", value: quill.root.innerHTML });\n      }\n    });\n  }, [onChangeField, imageHandler]);\n\n  const onChangeTitle = (e) => {\n    onChangeField({ key: \"title\", value: e.target.value });\n  };\n\n  return (\n    <section className={styles.editorWrapper}>\n      <input\n        className={styles.titleInput}\n        type=\"text\"\n        placeholder=\"제목을 입력하세요\"\n        onChange={onChangeTitle}\n        value={title}\n      />\n\n      <QuillWrapper>\n        <div className={styles.quillEditor} ref={quillElement} />\n      </QuillWrapper>\n    </section>\n  );\n};\nexport default Editor;\n","/Users/tmkim/Desktop/hola/client/src/component/language_bar_item/languageBarItem.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/login_user/loginUser.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/study_item/studyItem.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/modal/modal_component/modal.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/modal/login_modal/loginModal.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/modal/portal/portal.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/modal/post_modal/postModal.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/login_button/github_button/githubButton.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/login_button/google_button/googleButton.jsx",[],"/Users/tmkim/Desktop/hola/client/src/component/dropdown_bar/dropdownBar.jsx",["183"],"import React from \"react\";\nimport styles from \"./dropdownBar.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { clearUser } from \"../../store/user\";\nimport authService from \"../../service/auth_service\";\nimport { nextStep } from \"../../store/loginStep\";\n/* \n\nloginUser Component에서 DropDown bar button CLick시 rendering 되는 component로,\n닉네임, 작성 글, 찜한 글, 로그아웃으로 구성되어 있습니다.\n\n로그아웃의 경우 handleLogout을 통해 user를 초기화하는 과정을 진행하며\nAPI를 통해 refresh token을 초기화 합니다.\n\n*/\n\nconst DropdownBar = () => {\n  const user = useSelector((state) => state.user);\n  const dispatch = useDispatch();\n  const handleLogout = () => {\n    authService.logout().then((response) => {\n      dispatch(clearUser());\n      dispatch(nextStep(\"LOGIN\"));\n    });\n  };\n  return (\n    <div className={styles.menuWrapper}>\n      <ul className={styles.menu}>\n        <li className={styles.userName}>{user.name} 개발자</li>\n        <li className={styles.menuItem}>\n          <Link to=\"/list\">내 작성글</Link>\n        </li>\n        <li className={styles.menuItem}>\n          <Link to=\"/list\">찜한 글</Link>\n        </li>\n        <li className={styles.menuItem}>\n          <Link to=\"/setting\">설정</Link>\n        </li>\n        <li className={styles.menuItem} onClick={handleLogout}>\n          로그아웃\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default DropdownBar;\n","/Users/tmkim/Desktop/hola/client/src/component/login_button/kakao_button/kakaoButton.jsx",[],{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","severity":1,"message":"189","line":1,"column":17,"nodeType":"190","messageId":"191","endLine":1,"endColumn":25},{"ruleId":"188","severity":1,"message":"192","line":1,"column":27,"nodeType":"190","messageId":"191","endLine":1,"endColumn":36},{"ruleId":"188","severity":1,"message":"193","line":7,"column":10,"nodeType":"190","messageId":"191","endLine":7,"endColumn":21},{"ruleId":"188","severity":1,"message":"194","line":7,"column":23,"nodeType":"190","messageId":"191","endLine":7,"endColumn":34},{"ruleId":"188","severity":1,"message":"195","line":8,"column":10,"nodeType":"190","messageId":"191","endLine":8,"endColumn":33},{"ruleId":"188","severity":1,"message":"196","line":8,"column":35,"nodeType":"190","messageId":"191","endLine":8,"endColumn":44},{"ruleId":"197","severity":1,"message":"198","line":48,"column":54,"nodeType":"199","messageId":"200","endLine":48,"endColumn":56},{"ruleId":"201","severity":1,"message":"202","line":64,"column":5,"nodeType":"203","endLine":64,"endColumn":7,"suggestions":"204"},{"ruleId":"188","severity":1,"message":"193","line":8,"column":10,"nodeType":"190","messageId":"191","endLine":8,"endColumn":21},{"ruleId":"188","severity":1,"message":"195","line":10,"column":10,"nodeType":"190","messageId":"191","endLine":10,"endColumn":33},{"ruleId":"188","severity":1,"message":"196","line":10,"column":35,"nodeType":"190","messageId":"191","endLine":10,"endColumn":44},{"ruleId":"205","severity":1,"message":"206","line":15,"column":34,"nodeType":"207","messageId":"208","endLine":15,"endColumn":36},{"ruleId":"188","severity":1,"message":"209","line":3,"column":22,"nodeType":"190","messageId":"191","endLine":3,"endColumn":33},{"ruleId":"188","severity":1,"message":"210","line":22,"column":27,"nodeType":"190","messageId":"191","endLine":22,"endColumn":35},{"ruleId":"188","severity":1,"message":"189","line":1,"column":28,"nodeType":"190","messageId":"191","endLine":1,"endColumn":36},{"ruleId":"188","severity":1,"message":"196","line":9,"column":10,"nodeType":"190","messageId":"191","endLine":9,"endColumn":19},{"ruleId":"188","severity":1,"message":"211","line":9,"column":46,"nodeType":"190","messageId":"191","endLine":9,"endColumn":53},{"ruleId":"188","severity":1,"message":"212","line":45,"column":10,"nodeType":"190","messageId":"191","endLine":45,"endColumn":15},{"ruleId":"201","severity":1,"message":"213","line":75,"column":6,"nodeType":"203","endLine":75,"endColumn":8,"suggestions":"214"},{"ruleId":"188","severity":1,"message":"209","line":4,"column":16,"nodeType":"190","messageId":"191","endLine":4,"endColumn":27},"no-native-reassign",["215"],"no-negated-in-lhs",["216"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useDispatch' is defined but never used.","'useSelector' is defined but never used.","'fetchUserByRefreshToken' is defined but never used.","'clearUser' is defined but never used.","array-callback-return","Array.prototype.find() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user.nickName'. Either include it or remove the dependency array.","ArrayExpression",["217"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useLocation' is defined but never used.","'language' is assigned a value but never used.","'setUser' is defined but never used.","'image' is assigned a value but never used.","React Hook useCallback has a missing dependency: 'user.nickName'. Either include it or remove the dependency array.",["218"],"no-global-assign","no-unsafe-negation",{"desc":"219","fix":"220"},{"desc":"219","fix":"221"},"Update the dependencies array to be: [user.nickName]",{"range":"222","text":"223"},{"range":"224","text":"223"},[2142,2144],"[user.nickName]",[2397,2399]]